// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  ADMIN
  EMPLOYEE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  password       String
  role           RoleName
  department     Department?     @relation(fields: [departmentId], references: [id])
  departmentId   Int?
  employeeSkills EmployeeSkill[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Department {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  employeeSkills EmployeeSkill[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Course {
  id             Int             @id @default(autoincrement())
  name           String
  description    String?
  employeeSkills EmployeeSkill[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([name, description])
}

model Certification {
  id             Int             @id @default(autoincrement())
  name           String
  link           String?
  employeeSkills EmployeeSkill[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([name, link])
}

model EmployeeSkill {
  id              Int              @id @default(autoincrement())
  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  skill           Skill            @relation(fields: [skillId], references: [id])
  skillId         Int
  course          Course           @relation(fields: [courseId], references: [id])
  courseId        Int
  score           Float
  certificate     Certification?   @relation(fields: [certificateId], references: [id])
  certificateId   Int?
  approvalStatus  ApprovalStatus   @default(PENDING)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}
